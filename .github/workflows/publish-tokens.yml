name: Build Style Dictionary Tokens (Design Branch)

on:
  push:
    branches:
      - design # Dispara apenas no branch 'design'
    paths:
      - 'tokens/**' # Quando os tokens JSON mudam
      - 'tokens.config.js' # Quando a configuração do Style Dictionary muda
  pull_request: # Opcional: roda também para PRs no branch design
    branches:
      - design
    paths:
      - 'tokens/**'
      - 'tokens.config.js'
  workflow_dispatch: # Permite disparar manualmente

jobs:
  build-and-commit:
    runs-on: ubuntu-latest
    permissions:
      contents: write # ESSENCIAL: Permite que o GITHUB_TOKEN faça commit e push

    steps:
      - uses: actions/checkout@v4
        with:
          # Fetch all history for all branches and tags
          # This is important for git operations that might need full history
          fetch-depth: 0

      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22' # Use a versão recomendada do Node.js
          cache: 'npm'

      - name: Install dependencies
        run: npm install

      - name: Build Style Dictionary tokens
        run: npm run build:tokens

      - name: Commit generated files back to 'design' branch
        run: |
          # Configure o Git com o bot de ações do GitHub
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          # Adiciona todos os arquivos gerados na pasta build/
          git add build/

          # Verifica se há alterações para commitar.
          # O || git commit ... garante que o commit só aconteça se houver mudanças.
          # O [skip ci] é crucial para evitar loops infinitos de actions.
          git diff --staged --quiet || git commit -m "chore(tokens): auto-update generated tokens [skip ci]"

          # Empurra as alterações para o branch 'design'
          git push
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # O token de autenticação
